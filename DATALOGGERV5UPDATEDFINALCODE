#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>
#include <SD.h>
#include <MPU6050.h>
#include <WiFi.h>
#include <HTTPClient.h>

// Pin Definitions
#define DHTPIN1 4                // GPIO pin for the first DHT11 (ambient temperature)
#define DHTPIN2 15               // GPIO pin for the second DHT11 (motor temperature)
#define SPEED_SENSOR_PIN 2       // GPIO pin for Speed Sensor (D0 output of LM393)
#define SD_CS 5                  // GPIO pin for SD card CS
#define SWITCH_PIN 12            // GPIO pin for switch (collision detection)
#define DHTTYPE DHT11            // DHT sensor type

// Constants for Speed Calculation
#define PULSES_PER_REVOLUTION 20 // Number of pulses per full revolution of the wheel
#define WHEEL_DIAMETER_CM 3      // Diameter of the wheel in cm
#define WHEEL_DIAMETER_METERS (WHEEL_DIAMETER_CM / 100.0)  // Convert diameter to meters
#define WHEEL_CIRCUMFERENCE_METERS (PI * WHEEL_DIAMETER_METERS) // Circumference in meters

// DHT Sensors
DHT dht1(DHTPIN1, DHTTYPE);  // First DHT11 (ambient)
DHT dht2(DHTPIN2, DHTTYPE);  // Second DHT11 (motor)

// SD Card
const int chipSelect = SD_CS;

// Wi-Fi and Google Sheets URL
const char* ssid = "Virus";          // Replace with your Wi-Fi network name
const char* password = "Devendra@9625";  // Replace with your Wi-Fi password
const char* googleSheetsURL = "https://script.google.com/macros/s/AKfycbyLIj9dsP44zp7s-8izPENjaPVFBvh6u6yn6wZJjLcoK0BJcP_Y0yNhYqFNvrgjqwsEMA/exec";  // Replace with your Google Sheets web app URL

// I2C LCD
LiquidCrystal_I2C lcd(0x27, 16, 2);

// MPU6050
MPU6050 mpu;
bool mpuStatus = false;  // Flag for MPU initialization status
int16_t ax, ay, az;  // Use int16_t for accelerometer values
long tiltStartMillis = 0;  // To store the start time of the tilt
bool accidentDetected = false;  // To track accident detection

// Timing control
unsigned long previousMillis = 0;
const long interval = 5000; // Total cycle time (5 seconds)

// Speed Sensor
volatile int pulseCount = 0;   // Number of pulses detected
unsigned long lastPulseTime = 0;
float speedRPM = 0.0;  // Speed in RPM
float speedKMH = 0.0; // Speed in km/h

// A9G variables
bool sendMessage = false;
String messageToSend = "";

// Function prototypes
void sendSMS(String message);
void IRAM_ATTR pulseCounter();  // Add declaration of the pulseCounter function

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  Serial2.begin(115200, SERIAL_8N1, 16, 17);  // Use pins 16 (RX2) and 17 (TX2) for Serial2

  delay(2000);

  // Initialize A9G module
  Serial2.println("AT");
  delay(1000);
  Serial2.println("AT+CPIN?");
  delay(1000);
  
  // Set SMS text mode
  Serial2.println("AT+CMGF=1");
  delay(1000);

  // Initialize I2C LCD
  lcd.begin();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Data Logger");
  lcd.setCursor(0, 1);
  lcd.print("Project");
  delay(3000); // Display heading for 3 seconds
  lcd.clear();

  // Initialize DHT sensors
  dht1.begin();  // Ambient
  dht2.begin();  // Motor

  // Initialize SD card
  if (!SD.begin(chipSelect)) {
    Serial.println("SD card initialization failed!");
    lcd.setCursor(0, 0);
    lcd.print("SD Init Failed!");
    return;
  }
  Serial.println("SD card initialized.");
  lcd.setCursor(0, 0);
  lcd.print("SD Initialized");
  delay(2000);
  lcd.clear();

  // Initialize Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("Connected to Wi-Fi.");
  lcd.setCursor(0, 0);
  lcd.print("Wi-Fi Connected");
  delay(2000);
  lcd.clear();

  // Initialize MPU6050
  Wire.begin();
  mpu.initialize();
  mpuStatus = mpu.testConnection();
  if (mpuStatus) {
    Serial.println("MPU6050 connected.");
  } else {
    Serial.println("MPU6050 connection failed.");
    lcd.setCursor(0, 0);
    lcd.print("MPU Init Failed!");
    delay(2000);
    lcd.clear();
  }

  // Initialize Switch Pin
  pinMode(SWITCH_PIN, INPUT);

  // Initialize Speed Sensor
  pinMode(SPEED_SENSOR_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(SPEED_SENSOR_PIN), pulseCounter, FALLING);  // Attach the pulseCounter interrupt
}

void loop() {
  unsigned long currentMillis = millis();

  // Read ambient DHT11 sensor
  float humidity = dht1.readHumidity();
  float ambientTemperature = dht1.readTemperature();

  // Read motor DHT11 sensor
  float motorTemperature = dht2.readTemperature();

  // Check if any reads failed
  if (isnan(humidity) || isnan(ambientTemperature) || isnan(motorTemperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Read the state of the push switch (collision sensor)
  int switchState = digitalRead(SWITCH_PIN);

  // Read MPU6050 accelerometer data
  if (mpuStatus) {
    mpu.getAcceleration(&ax, &ay, &az);  // Get acceleration data in int16_t format
    float angleX = atan2(ax, az) * 180 / PI;  // Convert to angles
    float angleY = atan2(ay, az) * 180 / PI;

    // Check if the car is tilted left or right beyond a certain angle (e.g., >45 degrees)
    if (abs(angleX) > 45 || abs(angleY) > 45) {
      if (tiltStartMillis == 0) {
        tiltStartMillis = currentMillis;  // Record the time when the tilt started
      } else if (currentMillis - tiltStartMillis >= 2000) {
        accidentDetected = true;  // Tilt has persisted for more than 2 seconds
        messageToSend = "Accident Detected! Location: Unknown";  // Message to be sent via SMS
        sendMessage = true;
      }
    } else {
      tiltStartMillis = 0;  // Reset the tilt timer if the tilt goes back to normal
      accidentDetected = false;
    }
  }

  if (switchState == LOW) {  // If collision detected by switch
    messageToSend = "Collision Detected! Location: Unknown";
    sendMessage = true;
  }

  if (sendMessage) {
    sendSMS(messageToSend);  // Send SMS
    sendMessage = false;     // Reset flag after sending the SMS
  }

  if (currentMillis - previousMillis >= interval) {
    // Calculate speed in RPM
    noInterrupts();
    int pulses = pulseCount;
    pulseCount = 0;
    interrupts();
    
    speedRPM = (pulses / (float)PULSES_PER_REVOLUTION) * 60.0; // Convert to RPM

    // Convert RPM to km/h
    speedKMH = (speedRPM * WHEEL_CIRCUMFERENCE_METERS * 60) / 1000; // Convert to km/h

    // Display ambient temperature, humidity, and motor temperature
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Amb: " + String(ambientTemperature) + "C");
    lcd.setCursor(0, 1);
    lcd.print("Humidity: " + String(humidity) + "%");
    delay(2000); // Display for 2 seconds

    // Display accident status, switch status, and speed
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Accident: " + String(accidentDetected ? "Yes" : "No"));
    lcd.setCursor(0, 1);
    lcd.print("Collision: " + String(switchState == HIGH ? "No" : "Yes"));
    delay(2000); // Display accident and collision status for 2 seconds

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Speed: " + String(speedKMH) + " km/h");
    delay(2000); // Display speed for 2 seconds

    // Display motor temperature
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Motor: " + String(motorTemperature) + "C");
    delay(2000); // Display motor temperature for 2 seconds

    // Log to SD card and Google Sheets
    logData(ambientTemperature, humidity, motorTemperature, accidentDetected, switchState, speedKMH);

    previousMillis = currentMillis;
  }
}

void logData(float ambientTemp, float humidity, float motorTemp, bool accident, int collision, float speed) {
  // Log data to SD card
  File dataFile = SD.open("datalog.txt", FILE_WRITE);
  if (dataFile) {
    dataFile.print("Ambient Temp: ");
    dataFile.print(ambientTemp);
    dataFile.print(", Humidity: ");
    dataFile.print(humidity);
    dataFile.print(", Motor Temp: ");
    dataFile.print(motorTemp);
    dataFile.print(", Accident: ");
    dataFile.print(accident ? "Yes" : "No");
    dataFile.print(", Collision: ");
    dataFile.print(collision == HIGH ? "No" : "Yes");
    dataFile.print(", Speed (km/h): ");
    dataFile.println(speed);
    dataFile.close();
  } else {
    Serial.println("Error opening datalog.txt");
  }

  // Log data to Google Sheets via HTTP POST request
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(googleSheetsURL);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    String postData = "ambientTemp=" + String(ambientTemp) +
                      "&humidity=" + String(humidity) +
                      "&motorTemp=" + String(motorTemp) +
                      "&accident=" + String(accident ? "Yes" : "No") +
                      "&collision=" + String(collision == HIGH ? "No" : "Yes") +
                      "&speed=" + String(speed);

    int httpResponseCode = http.POST(postData);

    if (httpResponseCode > 0) {
      Serial.println("Data sent to Google Sheets successfully.");
    } else {
      Serial.println("Error sending data to Google Sheets.");
    }

    http.end();
  }
}

void sendSMS(String message) {
  Serial2.println("AT+CMGF=1");  // Set SMS mode to text
  delay(1000);
  Serial2.println("AT+CMGS=\"+919604263692\"");  // Set the phone number
  delay(1000);
  Serial2.print(message);  // Write the message
  delay(1000);
  Serial2.write(26);  // Send CTRL+Z to send the SMS
  delay(1000);
}

void IRAM_ATTR pulseCounter() {
  pulseCount++;
}
